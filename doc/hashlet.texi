\input texinfo   @c -*-texinfo-*-
@comment $Id@w{$}
@comment %**start of header
@setfilename hashlet.info
@include version.texi
@settitle Hashlet @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for Hashlet (version @value{VERSION}, @value{UPDATED}),
which is a command line application for the Cryptotronix Hashlet.

Copyright @copyright{} 2013 Cryptotronix, LLC.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* sample: (sample)Invoking sample.
@end direntry

@titlepage
@title Hashlet
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Josh Datko (@email{bugs@@cryptotronix.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Hashlet

This manual is for Hashlet (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* Preface::
* Hardware Overview::
* Installation::
* Invoking sample::
* Key Slot Configuration::
* GNU Free Documentation License::
* Index::
@end menu


@node Preface
@unnumbered Preface
@pindex preface

Welcome to the Cryptotronix Hashlet Manual!  This manual is meant for
end users of the Hashlet, an authentication device designed for the
@acronym{BBB, BeagleBone Black}.  It is expected that readers of this
manual have some familiarity with the BBB and installing and running
software on GNU/Linux platforms.

@node Hardware Overview
@chapter Hardware Overview

The Hashlet device as shipped from Cryptotronix, is fully assembled and
does not require any end-user assembly.  The mini-cape (capelet) is
designed to sit on the P9 header of the BBB. @xref{fig:bbb}.  It uses
pins P9_19 and P9_20 for the I2C protocol.  I2C test points are
available on the Hashlet for convenient access and debugging.

@float Figure,fig:bbb
@image{hashlet_bbb,6in}
@caption{Hashlet installed on a BBB using optional test points}
@end float

The @acronym{IC, Integrated Circuit} on the Hashlet is the Atmel
ATSHA204@footnote{ATSHA204 Datasheet:
@url{http://www.atmel.com/Images/Atmel-8740-CryptoAuth-ATSHA204-Datasheet.pdf}}.
The key features of the ATSHA204 used by the Hashlet are:

@itemize
@item Hardware random number generator.
@item Lockable configuration, @acronym{OTP, One Time Programmable}, and
Data zones
@item Slots for 16 keys (14 of which are user keys, 2 are test keys)
@item Hardware @acronym{MAC, Message Authentication Code} using SHA256
and internal data unique to the device.
@item Hardware verification of MACs generated on the device.
@end itemize

The Hashlet, while designed for a BBB, is 5 Volt compatible and can be
used on other platforms like a Raspberry Pi or Arduino.  However, the
Hashlet software requires a GNU/Linux compatible operating system.

@node Installation
@chapter Installation

@section Hardware Installation

The Hashlet ships fully assembled and tested.  Remove the device from
the static-free bag and attached it to the P9 header of the BeagleBone
Black. @xref{fig:bbb}.  Once attached, the device is ready for use.

@section Software Installation

The latest release for the software is available at
@url{http://download.savannah.gnu.org/releases/hashlet/}.  The software
was signed with a GPG key with a fingerprint of
@code{0xB5919B1AC7135905F4669C847BFA5031BD2EDEA6}, which you can
download from a key server or from
Savannah. @footnote{@url{https://savannah.nongnu.org/people/viewgpg.php?user_id=93382}.}


After verification, run the typical commands, @command{./configure} and
@command{make} to build the software.  However, to enable all of the
features, you should fist install @code{libgcrypt}.  Consult your
operating system's package manager for documentation.  For Debian, one
can install @code{libgcrypt} as follows: @kbd{sudo apt-get install
libgcrypt11-dev}.  If @code{libgcrypt} is not installed,
@command{configure} will produce a warning. @xref{lst:warning}.

@float Listing,lst:warning
@caption{Warning messages users can expect if @code{ibgcrypt} is not installed}
@code{@*
   ----------------------------------------------------@*
   Unable to find gcrypt.h on this system.@*
   Some features are disabled, install libgcrypt and@*
   rebuild to enable them.@*
   ----------------------------------------------------}
@end float

@kindex state

Once the software is built, one can install the software with @kbd{sudo
make install}.  The default install location is
@file{/usr/local/bin/hashlet}.  The hashlet is shipped in a
@dfn{factory} state.  This means that unique keys have not yet been
loaded and the device is not ready for cryptographic operation.  The
first command you should run, to ensure that the device is working and
is in the correct state is @command{hashlet /dev/i2c-1 state}.  The
response to this command should be @code{Factory}.  If it's not,
contact Cryptotronix
support.@footnote{@email{support@@cryptotronix.com}}.

The next command one should run is @command{hashlet /dev/i2c-1
personalize}.  This will configure the hashlet by populating the key
slot configuration.  @xref{Key Slot Configuration}.  It will also fill
in random keys in key slots 0-13 and test keys in 14-15.  The test keys
should not be used for production use.  Upon successful personalization,
a backup of all keys will be written to @file{~/.hashlet} in
un-encrypted form.  The command will silently complete on success, but
if you want to ensure that it completed succesfuly, you can verify the
exit code is 0 with @kbd{echo $?}.

With a device now in the @dfn{personalized} state, the output of the
@command{state} command should now be @code{Personalized}.  Also, if you
return to the build directory, the @code{make check} target will now
test the cryptographic operation of the device.

Congratulations, you now have a personalized Hashlet!



@node Invoking hashlet
@chapter Invoking hashlet

@pindex hashlet
@cindex invoking @command{hashlet}

This is a sample manual.  There is no sample program to
invoke, but if there were, you could see its basic usage
and command line options here.

@node Key Slot Configuration
@appendix Key Slot Configuration

During the personalization process, the key usage fields are set in the
configuration zone.  For each of the 16 data slots, there is a
corresponding slot configuration that describes how that data slot is
used. There are several attributes that control various aspects about
the data slot.  @xref{tab:slot_config_settings}.

@float Table,tab:slot_config_settings
@table @samp
@item ReadKey
The corresponding slot that is used for encrypted reads.

@item CheckOnly
If set, this slot can only be used in CheckMac operations.

@item SingleUse
If set, this key slot has a limited amount of uses

@item EncryptedRead
If set, encrypted reads are required for this slot

@item IsSecret
If set, encrypted reads and writes are required for this slot

@item WriteKey
The slot of the key used for encrypted writes.

@item DeriveKey
If set, this slot may be written to with the Derive Key command

@item WriteAlways
If set, non-encrypted writes are always allowed

@item WriteNever
If set, writes are never permitted once the Data zone is locked

@item WriteEncrypt
If set, only encrypted writes are permitted.
@end table
@end float

If @samp{IsSecret} is set and @samp{EncryptedRead} is not, the slot can
never be read.  Likewise, if @samp{WriteNever} is set, the data slot can
not be written.

To alleviate the burden of the user from deciding how to configure their
devices, Cryptotronix has picked the following
defaults. @xref{tab:slot_config}.  These settings are set during
personalization.  If a property is mentioned, it is set, otherwise it is
off (not set).

Keys 0-7 can be used for keyed hashing applications.  Keys 8-11 are
reserved for password checking features.  Slots 12 and 13 allow write
and read access and therefore are available for data storage.  Key
storage in these slots is not recommended.  Key slots 14 and 15 are used
as fixed test keys and can be read but not written after personalization.

@float Table,tab:slot_config
@table @samp
@item Data Slot 0
@samp{IsSecret}, @samp{WriteNever}

@item Data Slot 1
@samp{IsSecret}, @samp{WriteNever}, @samp{DeriveKey}

@item Data Slot 2
@samp{IsSecret}, @samp{WriteNever}

@item Data Slot 3
@samp{IsSecret}, @samp{WriteNever}, @samp{DeriveKey}

@item Data Slot 4
@samp{IsSecret}, @samp{WriteNever}

@item Data Slot 5
@samp{IsSecret}, @samp{WriteNever}, @samp{DeriveKey}

@item Data Slot 6
@samp{IsSecret}, @samp{WriteNever}

@item Data Slot 7
@samp{IsSecret}, @samp{WriteNever}, @samp{DeriveKey}

@item Data Slot 8
@samp{IsSecret}, @samp{WriteNever}

@item Data Slot 9
@samp{IsSecret}, @samp{WriteNever}

@item Data Slot 10
@samp{IsSecret}, @samp{WriteNever}

@item Data Slot 11
@samp{IsSecret}, @samp{WriteNever}

@item Data Slot 12
@samp{WriteAlways}

@item Data Slot 13
@samp{WriteAlways}

@item Data Slot 14
@samp{WriteNever}

@item Data Slot 15
@samp{WriteNever}


@end table
@end float

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi


@node Index
@unnumbered Index

@printindex cp
@printindex ky

@bye
